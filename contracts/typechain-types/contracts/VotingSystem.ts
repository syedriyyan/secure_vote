/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface VotingSystemInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "addCandidate"
      | "admin"
      | "createElection"
      | "elections"
      | "electionsCount"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "CandidateAdded" | "ElectionCreated" | "VoteCasted"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "addCandidate",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(functionFragment: "admin", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "createElection",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "elections",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "electionsCount",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "addCandidate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "admin", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "createElection",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "elections", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "electionsCount",
    data: BytesLike
  ): Result;
}

export namespace CandidateAddedEvent {
  export type InputTuple = [electionId: BigNumberish, candidateName: string];
  export type OutputTuple = [electionId: bigint, candidateName: string];
  export interface OutputObject {
    electionId: bigint;
    candidateName: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ElectionCreatedEvent {
  export type InputTuple = [electionId: BigNumberish, name: string];
  export type OutputTuple = [electionId: bigint, name: string];
  export interface OutputObject {
    electionId: bigint;
    name: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace VoteCastedEvent {
  export type InputTuple = [
    electionId: BigNumberish,
    candidateId: BigNumberish
  ];
  export type OutputTuple = [electionId: bigint, candidateId: bigint];
  export interface OutputObject {
    electionId: bigint;
    candidateId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface VotingSystem extends BaseContract {
  connect(runner?: ContractRunner | null): VotingSystem;
  waitForDeployment(): Promise<this>;

  interface: VotingSystemInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  addCandidate: TypedContractMethod<
    [_electionId: BigNumberish, _name: string],
    [void],
    "nonpayable"
  >;

  admin: TypedContractMethod<[], [string], "view">;

  createElection: TypedContractMethod<
    [_name: string, _startTime: BigNumberish, _endTime: BigNumberish],
    [void],
    "nonpayable"
  >;

  elections: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, string, boolean, bigint, bigint, bigint] & {
        id: bigint;
        name: string;
        isActive: boolean;
        startTime: bigint;
        endTime: bigint;
        candidatesCount: bigint;
      }
    ],
    "view"
  >;

  electionsCount: TypedContractMethod<[], [bigint], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "addCandidate"
  ): TypedContractMethod<
    [_electionId: BigNumberish, _name: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "admin"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "createElection"
  ): TypedContractMethod<
    [_name: string, _startTime: BigNumberish, _endTime: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "elections"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, string, boolean, bigint, bigint, bigint] & {
        id: bigint;
        name: string;
        isActive: boolean;
        startTime: bigint;
        endTime: bigint;
        candidatesCount: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "electionsCount"
  ): TypedContractMethod<[], [bigint], "view">;

  getEvent(
    key: "CandidateAdded"
  ): TypedContractEvent<
    CandidateAddedEvent.InputTuple,
    CandidateAddedEvent.OutputTuple,
    CandidateAddedEvent.OutputObject
  >;
  getEvent(
    key: "ElectionCreated"
  ): TypedContractEvent<
    ElectionCreatedEvent.InputTuple,
    ElectionCreatedEvent.OutputTuple,
    ElectionCreatedEvent.OutputObject
  >;
  getEvent(
    key: "VoteCasted"
  ): TypedContractEvent<
    VoteCastedEvent.InputTuple,
    VoteCastedEvent.OutputTuple,
    VoteCastedEvent.OutputObject
  >;

  filters: {
    "CandidateAdded(uint256,string)": TypedContractEvent<
      CandidateAddedEvent.InputTuple,
      CandidateAddedEvent.OutputTuple,
      CandidateAddedEvent.OutputObject
    >;
    CandidateAdded: TypedContractEvent<
      CandidateAddedEvent.InputTuple,
      CandidateAddedEvent.OutputTuple,
      CandidateAddedEvent.OutputObject
    >;

    "ElectionCreated(uint256,string)": TypedContractEvent<
      ElectionCreatedEvent.InputTuple,
      ElectionCreatedEvent.OutputTuple,
      ElectionCreatedEvent.OutputObject
    >;
    ElectionCreated: TypedContractEvent<
      ElectionCreatedEvent.InputTuple,
      ElectionCreatedEvent.OutputTuple,
      ElectionCreatedEvent.OutputObject
    >;

    "VoteCasted(uint256,uint256)": TypedContractEvent<
      VoteCastedEvent.InputTuple,
      VoteCastedEvent.OutputTuple,
      VoteCastedEvent.OutputObject
    >;
    VoteCasted: TypedContractEvent<
      VoteCastedEvent.InputTuple,
      VoteCastedEvent.OutputTuple,
      VoteCastedEvent.OutputObject
    >;
  };
}
