/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface BallotInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "addCandidate"
      | "candidateCount"
      | "electionId"
      | "electionName"
      | "endBallot"
      | "endTime"
      | "ended"
      | "getCandidates"
      | "getWinners"
      | "hasAddressVoted"
      | "registry"
      | "startTime"
      | "totalVotes"
      | "vote"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "BallotEnded" | "CandidateAdded" | "VoteCast"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "addCandidate",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "candidateCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "electionId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "electionName",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "endBallot", values?: undefined): string;
  encodeFunctionData(functionFragment: "endTime", values?: undefined): string;
  encodeFunctionData(functionFragment: "ended", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getCandidates",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getWinners",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "hasAddressVoted",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "registry", values?: undefined): string;
  encodeFunctionData(functionFragment: "startTime", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalVotes",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "vote", values: [BigNumberish]): string;

  decodeFunctionResult(
    functionFragment: "addCandidate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "candidateCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "electionId", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "electionName",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "endBallot", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "endTime", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ended", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getCandidates",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getWinners", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "hasAddressVoted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "registry", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "startTime", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "totalVotes", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "vote", data: BytesLike): Result;
}

export namespace BallotEndedEvent {
  export type InputTuple = [];
  export type OutputTuple = [];
  export interface OutputObject {}
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CandidateAddedEvent {
  export type InputTuple = [id: BigNumberish, name: string];
  export type OutputTuple = [id: bigint, name: string];
  export interface OutputObject {
    id: bigint;
    name: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace VoteCastEvent {
  export type InputTuple = [voter: AddressLike, candidateId: BigNumberish];
  export type OutputTuple = [voter: string, candidateId: bigint];
  export interface OutputObject {
    voter: string;
    candidateId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface Ballot extends BaseContract {
  connect(runner?: ContractRunner | null): Ballot;
  waitForDeployment(): Promise<this>;

  interface: BallotInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  addCandidate: TypedContractMethod<[name: string], [void], "nonpayable">;

  candidateCount: TypedContractMethod<[], [bigint], "view">;

  electionId: TypedContractMethod<[], [bigint], "view">;

  electionName: TypedContractMethod<[], [string], "view">;

  endBallot: TypedContractMethod<[], [void], "nonpayable">;

  endTime: TypedContractMethod<[], [bigint], "view">;

  ended: TypedContractMethod<[], [boolean], "view">;

  getCandidates: TypedContractMethod<
    [],
    [
      [bigint[], string[], bigint[]] & {
        ids: bigint[];
        names: string[];
        votes: bigint[];
      }
    ],
    "view"
  >;

  getWinners: TypedContractMethod<
    [],
    [[bigint[], bigint] & { winnerIds: bigint[]; winningVoteCount: bigint }],
    "view"
  >;

  hasAddressVoted: TypedContractMethod<[voter: AddressLike], [boolean], "view">;

  registry: TypedContractMethod<[], [string], "view">;

  startTime: TypedContractMethod<[], [bigint], "view">;

  totalVotes: TypedContractMethod<[], [bigint], "view">;

  vote: TypedContractMethod<[candidateId: BigNumberish], [void], "nonpayable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "addCandidate"
  ): TypedContractMethod<[name: string], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "candidateCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "electionId"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "electionName"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "endBallot"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "endTime"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "ended"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "getCandidates"
  ): TypedContractMethod<
    [],
    [
      [bigint[], string[], bigint[]] & {
        ids: bigint[];
        names: string[];
        votes: bigint[];
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getWinners"
  ): TypedContractMethod<
    [],
    [[bigint[], bigint] & { winnerIds: bigint[]; winningVoteCount: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "hasAddressVoted"
  ): TypedContractMethod<[voter: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "registry"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "startTime"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "totalVotes"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "vote"
  ): TypedContractMethod<[candidateId: BigNumberish], [void], "nonpayable">;

  getEvent(
    key: "BallotEnded"
  ): TypedContractEvent<
    BallotEndedEvent.InputTuple,
    BallotEndedEvent.OutputTuple,
    BallotEndedEvent.OutputObject
  >;
  getEvent(
    key: "CandidateAdded"
  ): TypedContractEvent<
    CandidateAddedEvent.InputTuple,
    CandidateAddedEvent.OutputTuple,
    CandidateAddedEvent.OutputObject
  >;
  getEvent(
    key: "VoteCast"
  ): TypedContractEvent<
    VoteCastEvent.InputTuple,
    VoteCastEvent.OutputTuple,
    VoteCastEvent.OutputObject
  >;

  filters: {
    "BallotEnded()": TypedContractEvent<
      BallotEndedEvent.InputTuple,
      BallotEndedEvent.OutputTuple,
      BallotEndedEvent.OutputObject
    >;
    BallotEnded: TypedContractEvent<
      BallotEndedEvent.InputTuple,
      BallotEndedEvent.OutputTuple,
      BallotEndedEvent.OutputObject
    >;

    "CandidateAdded(uint256,string)": TypedContractEvent<
      CandidateAddedEvent.InputTuple,
      CandidateAddedEvent.OutputTuple,
      CandidateAddedEvent.OutputObject
    >;
    CandidateAdded: TypedContractEvent<
      CandidateAddedEvent.InputTuple,
      CandidateAddedEvent.OutputTuple,
      CandidateAddedEvent.OutputObject
    >;

    "VoteCast(address,uint256)": TypedContractEvent<
      VoteCastEvent.InputTuple,
      VoteCastEvent.OutputTuple,
      VoteCastEvent.OutputObject
    >;
    VoteCast: TypedContractEvent<
      VoteCastEvent.InputTuple,
      VoteCastEvent.OutputTuple,
      VoteCastEvent.OutputObject
    >;
  };
}
